<UserControl x:Class="MonikDesktop.Views.RemoveEntitiesView" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ns0="clr-namespace:MonikDesktop.Views" xmlns:ns1="clr-namespace:MonikDesktop.ViewModels" xmlns:ns2="clr-namespace:AmmySidekick;assembly=AmmySidekick" ns2:Ammy.Register="/MonikDesktop;component/Views/RemoveEntitiesView.g.xaml">
  <UserControl.Resources>
    <ns0:BindingProxy x:Key="Proxy">
      <ns0:BindingProxy.Data>
        <Binding/>
      </ns0:BindingProxy.Data>
    </ns0:BindingProxy>
  </UserControl.Resources>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid Row="1" Margin="5">
      <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid Row="0" Margin="0 10 0 10">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto"/>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Label Grid.Column="0" Margin="0 0 5 0">Search:</Label>
        <TextBox Grid.Column="1">
          <TextBox.Text>
            <Binding Path="FilterText" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged"/>
          </TextBox.Text>
        </TextBox>
      </Grid>
      <TabControl Grid.Row="1" Margin="10" BorderBrush="Gainsboro">
        <TabControl.Resources>
          <Style TargetType="TabItem">
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                  <Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0" Margin="2,0">
                    <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="10,2"/>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                      <Setter TargetName="Border" Property="Background" Value="LightSkyBlue"/>
                    </Trigger>
                    <Trigger Property="IsSelected" Value="False">
                      <Setter TargetName="Border" Property="Background" Value="GhostWhite"/>
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Style>
        </TabControl.Resources>
        <TabItem Header="Tree View">
          <TreeView x:Name="RemovableEntities" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling">
            <TreeView.ItemsSource>
              <Binding Path="SourcesTree"/>
            </TreeView.ItemsSource>
            <TreeView.Resources>
              <HierarchicalDataTemplate DataType="{x:Type ns1:NodeSource}">
                <HierarchicalDataTemplate.ItemsSource>
                  <Binding Path="Instances"/>
                </HierarchicalDataTemplate.ItemsSource>
                <StackPanel Orientation="Horizontal">
                  <Border Margin="0,0,10,0" Padding="5, 1, 5, 2" Background="DeepSkyBlue" CornerRadius="5">
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="10" Foreground="White" Text="Source"/>
                  </Border>
                  <TextBlock VerticalAlignment="Center" Margin="0,0,10,0">
                    <TextBlock.Text>
                      <Binding Path="Value.Name"/>
                    </TextBlock.Text>
                  </TextBlock>
                  <TextBlock VerticalAlignment="Center" Foreground="LightGray">
                    <TextBlock.Text>
                      <Binding Path="Value.ID" StringFormat="(id: {0})"/>
                    </TextBlock.Text>
                  </TextBlock>
                  <Button Margin="10,0,0,0">
                    <Button.CommandParameter>
                      <Binding/>
                    </Button.CommandParameter>
                    <Button.Style>
                      <Style TargetType="{x:Type Button}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                              <Border x:Name="button" Padding="5,0,5,1" CornerRadius="5" Background="Red" BorderBrush="Black" BorderThickness="1">
                                <TextBlock Foreground="White" FontWeight="Bold" Text="{TemplateBinding Button.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                              </Border>
                              <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                  <Setter Property="Background" Value="Brown" TargetName="button"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                  <Setter Property="Background" Value="DarkRed" TargetName="button"/>
                                </Trigger>
                              </ControlTemplate.Triggers>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Visibility" Value="Visible"/>
                        <Setter Property="Opacity" Value="0"/>
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TreeViewItem}},Path=IsMouseOver}" Value="True">
                            <DataTrigger.EnterActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5"/>
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.5"/>
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.ExitActions>
                            <Setter Property="Opacity" Value="1"/>
                          </DataTrigger>
                          <Trigger Property="Opacity" Value="0">
                            <Setter Property="Visibility" Value="Hidden"/>
                          </Trigger>
                        </Style.Triggers>
                      </Style>
                    </Button.Style>
                    <Button.Command>
                      <Binding Path="Data.RemoveNodeSourceCommand" Source="{StaticResource Proxy}"/>
                    </Button.Command>X
                  </Button>
                </StackPanel>
              </HierarchicalDataTemplate>
              <HierarchicalDataTemplate DataType="{x:Type ns1:NodeInstance}">
                <HierarchicalDataTemplate.ItemsSource>
                  <Binding Path="Metrics"/>
                </HierarchicalDataTemplate.ItemsSource>
                <StackPanel Orientation="Horizontal">
                  <Border Margin="0,0,10,0" Padding="5, 1, 5, 2" Background="LimeGreen" CornerRadius="5">
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="10" Foreground="White" Text="Instance"/>
                  </Border>
                  <TextBlock VerticalAlignment="Center" Margin="0,0,10,0">
                    <TextBlock.Text>
                      <Binding Path="Value.Name"/>
                    </TextBlock.Text>
                  </TextBlock>
                  <TextBlock VerticalAlignment="Center" Foreground="LightGray">
                    <TextBlock.Text>
                      <Binding Path="Value.ID" StringFormat="(id: {0})"/>
                    </TextBlock.Text>
                  </TextBlock>
                  <Button Margin="10,0,0,0">
                    <Button.CommandParameter>
                      <Binding/>
                    </Button.CommandParameter>
                    <Button.Style>
                      <Style TargetType="{x:Type Button}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                              <Border x:Name="button" Padding="5,0,5,1" CornerRadius="5" Background="Red" BorderBrush="Black" BorderThickness="1">
                                <TextBlock Foreground="White" FontWeight="Bold" Text="{TemplateBinding Button.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                              </Border>
                              <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                  <Setter Property="Background" Value="Brown" TargetName="button"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                  <Setter Property="Background" Value="DarkRed" TargetName="button"/>
                                </Trigger>
                              </ControlTemplate.Triggers>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Visibility" Value="Visible"/>
                        <Setter Property="Opacity" Value="0"/>
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TreeViewItem}},Path=IsMouseOver}" Value="True">
                            <DataTrigger.EnterActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5"/>
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.5"/>
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.ExitActions>
                            <Setter Property="Opacity" Value="1"/>
                          </DataTrigger>
                          <Trigger Property="Opacity" Value="0">
                            <Setter Property="Visibility" Value="Hidden"/>
                          </Trigger>
                        </Style.Triggers>
                      </Style>
                    </Button.Style>
                    <Button.Command>
                      <Binding Path="Data.RemoveNodeInstanceCommand" Source="{StaticResource Proxy}"/>
                    </Button.Command>X
                  </Button>
                </StackPanel>
              </HierarchicalDataTemplate>
              <DataTemplate DataType="{x:Type ns1:NodeMetric}">
                <StackPanel Orientation="Horizontal">
                  <Border Margin="0,0,10,0" Padding="5, 1, 5, 2" Background="OrangeRed" CornerRadius="5">
                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="10" Foreground="White" Text="Metric"/>
                  </Border>
                  <TextBlock VerticalAlignment="Center" Margin="0,0,10,0">
                    <TextBlock.Text>
                      <Binding Path="Value.Name"/>
                    </TextBlock.Text>
                  </TextBlock>
                  <TextBlock VerticalAlignment="Center" Foreground="LightGray">
                    <TextBlock.Text>
                      <Binding Path="Value.ID" StringFormat="(id: {0})"/>
                    </TextBlock.Text>
                  </TextBlock>
                  <Button Margin="10,0,0,0">
                    <Button.CommandParameter>
                      <Binding/>
                    </Button.CommandParameter>
                    <Button.Style>
                      <Style TargetType="{x:Type Button}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                              <Border x:Name="button" Padding="5,0,5,1" CornerRadius="5" Background="Red" BorderBrush="Black" BorderThickness="1">
                                <TextBlock Foreground="White" FontWeight="Bold" Text="{TemplateBinding Button.Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                              </Border>
                              <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                  <Setter Property="Background" Value="Brown" TargetName="button"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                  <Setter Property="Background" Value="DarkRed" TargetName="button"/>
                                </Trigger>
                              </ControlTemplate.Triggers>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                        <Setter Property="Visibility" Value="Visible"/>
                        <Setter Property="Opacity" Value="0"/>
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TreeViewItem}},Path=IsMouseOver}" Value="True">
                            <DataTrigger.EnterActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5"/>
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                              <BeginStoryboard>
                                <Storyboard>
                                  <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.5"/>
                                </Storyboard>
                              </BeginStoryboard>
                            </DataTrigger.ExitActions>
                            <Setter Property="Opacity" Value="1"/>
                          </DataTrigger>
                          <Trigger Property="Opacity" Value="0">
                            <Setter Property="Visibility" Value="Hidden"/>
                          </Trigger>
                        </Style.Triggers>
                      </Style>
                    </Button.Style>
                    <Button.Command>
                      <Binding Path="Data.RemoveNodeMetricCommand" Source="{StaticResource Proxy}"/>
                    </Button.Command>X
                  </Button>
                </StackPanel>
              </DataTemplate>
            </TreeView.Resources>
          </TreeView>
        </TabItem>
        <TabItem Header="Sources">
          <DataGrid IsReadOnly="True" CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False" RowHeight="40" HorizontalGridLinesBrush="Silver" VerticalGridLinesBrush="Silver" GridLinesVisibility="Horizontal" x:Name="SourcesGrid">
            <DataGrid.ItemsSource>
              <Binding Path="SourcesFiltered"/>
            </DataGrid.ItemsSource>
            <DataGrid.Columns>
              <DataGridTextColumn Header="ID" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="ID"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTextColumn Header="Source" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="Name"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTemplateColumn>
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <Button>Remove
                      <Button.Command>
                        <Binding Path="Data.RemoveSourceCommand" Source="{StaticResource Proxy}"/>
                      </Button.Command>
                      <Button.CommandParameter>
                        <Binding/>
                      </Button.CommandParameter>
                    </Button>
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>
            </DataGrid.Columns>
          </DataGrid>
        </TabItem>
        <TabItem Header="Instances">
          <DataGrid IsReadOnly="True" CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False" RowHeight="40" HorizontalGridLinesBrush="Silver" VerticalGridLinesBrush="Silver" GridLinesVisibility="Horizontal" x:Name="InstancesGrid">
            <DataGrid.ItemsSource>
              <Binding Path="InstancesFiltered"/>
            </DataGrid.ItemsSource>
            <DataGrid.Columns>
              <DataGridTextColumn Header="ID" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="ID"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTextColumn Header="Source" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="Source.Name"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTextColumn Header="Instance" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="Name"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTemplateColumn>
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <Button>Remove
                      <Button.Command>
                        <Binding Path="Data.RemoveInstanceCommand" Source="{StaticResource Proxy}"/>
                      </Button.Command>
                      <Button.CommandParameter>
                        <Binding/>
                      </Button.CommandParameter>
                    </Button>
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>
            </DataGrid.Columns>
          </DataGrid>
        </TabItem>
        <TabItem Header="Metrics">
          <DataGrid IsReadOnly="True" CanUserAddRows="False" CanUserDeleteRows="False" AutoGenerateColumns="False" RowHeight="40" HorizontalGridLinesBrush="Silver" VerticalGridLinesBrush="Silver" GridLinesVisibility="Horizontal" x:Name="MetricsGrid">
            <DataGrid.ItemsSource>
              <Binding Path="MetricsFiltered"/>
            </DataGrid.ItemsSource>
            <DataGrid.Columns>
              <DataGridTextColumn Header="ID" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="ID"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTextColumn Header="Source" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="Instance.Source.Name"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTextColumn Header="Instance" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="Instance.Name"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTextColumn Header="Metric" Width="Auto">
                <DataGridTextColumn.Binding>
                  <Binding Path="Name"/>
                </DataGridTextColumn.Binding>
              </DataGridTextColumn>
              <DataGridTemplateColumn>
                <DataGridTemplateColumn.CellTemplate>
                  <DataTemplate>
                    <Button>Remove
                      <Button.Command>
                        <Binding Path="Data.RemoveMetricCommand" Source="{StaticResource Proxy}"/>
                      </Button.Command>
                      <Button.CommandParameter>
                        <Binding/>
                      </Button.CommandParameter>
                    </Button>
                  </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
              </DataGridTemplateColumn>
            </DataGrid.Columns>
          </DataGrid>
        </TabItem>
      </TabControl>
    </Grid>
  </Grid>
</UserControl>