alias HeaderText(text)
{
  Border
  {
    BorderBrush: resource dyn "AccentBaseColorBrush"
    BorderThickness: "0,0,0,4"
    TextBlock
    {
      HorizontalAlignment: Center
      VerticalAlignment: Center
      FontSize: 20
      Text: $text
    }
  }
}

alias InstancesData()
{
  @SimpleDataGrid() 
  {
    PreviewMouseLeftButtonDown: "GridMouseLeftButtonDown" 
    PreviewMouseMove: "GridMouseMove"
    Drop: "GridDrop"
    DragEnter: "GridDragEnter"
    DragOver: "GridDragOver"
    AllowDrop: true
    Columns: [
        DataGridTextColumn
        {
          Header: "ID"
          Binding: bind ID
          Width: Auto
        }
        DataGridTextColumn
        {
          Header: "Source"
          Binding: bind Source.Name
          Width: Auto
        }
        DataGridTextColumn
        {
          Header: "Instance"
          Binding: bind Name
          Width: Auto
        }
      ]
  }
}

alias PlusButton(bindingCommand, bindingCommandParameter=none)
{
  Button 
  {
    "+"
    Command: $bindingCommand
    CommandParameter: $bindingCommandParameter
    Style: Style {
      TargetType: Button
      Setter 
      {
        Property: "Template"
        Value: ControlTemplate
        {
          TargetType: Button
      
          Border "button"
          { 
            Grid.Column: 0
            HorizontalAlignment: Center
            VerticalAlignment: Center
            Padding: "7,0,7,5"
            Background: Green
            CornerRadius: 10
            Width: 30
            Height: 30
            TextBlock 
            {
              HorizontalAlignment: Center
              VerticalAlignment: Center
              Foreground: White
              FontSize: 20
              FontWeight: "Bold"
              Text: "{TemplateBinding Button.Content}"
            }
          }
      
          Triggers:
          [
            Trigger
            {
              Property: "IsMouseOver"
              Value: true
              #Setter("Background", SeaGreen, "button")
            }
            Trigger
            {
              Property: "IsPressed"
              Value: true
              #Setter("Background", DarkGreen, "button")
            }
          ]
        }
      }
    }
  }
}


UserControl "MonikDesktop.Views.ManageGroupsView"
{
  Resources: [ BindingProxy Key="Proxy" { Data: bind } ]
  Grid 
  {
    #TwoRows(50)
    #FiveColumns("*", 20, "*", 20, "*")
    Grid 
    {
      #Cell(0, 0)
      #ThreeColumns("*", "Auto", "*")
      @HeaderText("Groups")
      {
        Grid.Column: 1
      }
      @PlusButton(bind CreateGroupCommand) 
      {
        Grid.Column: 2
      }
    }
    Grid 
    {
      #Cell(0, 2)
      #ThreeColumns("*", "Auto", "*")
      @HeaderText("In Group")
      {
        Grid.Column: 1
      }
    }
    Grid
    {
      #Cell(0, 4)
      #ThreeColumns("*", "Auto", "*")
      Border
      { 
        Grid.Column: 0
        HorizontalAlignment: Center
        VerticalAlignment: Center
        Padding: "7,3,7,5"
        Background: Orange
        CornerRadius: 10
        MinWidth: 40
        TextBlock 
        {
          HorizontalAlignment: Center
          VerticalAlignment: Center
          Foreground: White
          FontSize: 20
          Text: bind ListWithoutGroup.Count
        }
        Style: Style
        {
          TargetType: Border
          #Visibility_OnBinding(bind ListWithoutGroup.Count, 0, "Collapsed", "Visible")
        }
      }
      @HeaderText("Without Group")
      {
        Grid.Column: 1
      }
    }
    @SimpleDataGrid()
    {
      #Cell(1, 0)
      ItemsSource: bind ListGroups
      SelectedItem: bind SelectedGroup set [ Mode: TwoWay ]
      Columns: [
        DataGridTemplateColumn
        {
          CellTemplate: DataTemplate
          {
            @RemoveButton(bind Data.RemoveGroupCommand from $resource Proxy, bind)
            {
              Margin: 10
              Style: Style
              {
                #RemoveButtonStyle()
                #Fade_OnBinding("{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type DataGridRow}},Path=IsMouseOver}", true)
              }
            }
          }
        }
        DataGridTextColumn
        {
          Header: "ID"
          Binding: bind Group.ID
          Width: Auto
        }
        DataGridTextColumn
        {
          Header: "Group"
          Binding: bind Group.Name
          Width: Auto
        }
        DataGridTextColumn
        {
          Header: "Default"
          Binding: bind Group.IsDefault convert (bool val) => val ? "Default" : ""
          Width: Auto
        }
        DataGridTextColumn
        {
          Header: "Amount"
          ElementStyle: Style
          {
            TargetType: TextBlock
            #Setter("HorizontalAlignment", "Right")
            #Setter("Margin", "10")
          }
          Binding: bind InstancesAmount set [ Mode: TwoWay ]
          Width: "*"
        }
      ]
    }
    @InstancesData()
    {
      Tag: "InGroup"
      #Cell(1, 2)
      ItemsSource: bind ListInGroup
    }
    @InstancesData()
    {
      Tag: "WithoutGroup"
      #Cell(1, 4)
      ItemsSource: bind ListWithoutGroup
    }
  }
  

}