using MonikDesktop.ViewModels;
using MonikDesktop.Common.Interfaces;
using FontAwesome.WPF;

alias ComboBoxWithRemove(removeCommand, itemsSource, selectedValue, updateValue)
{
  ComboBox
  {
    IsEditable: true
    ItemTemplate: DataTemplate
    {
      StackPanel
      {
        Orientation: Horizontal
        Button
        {
          "Remove"
          Command: bind $removeCommand from $resource Proxy
          CommandParameter: bind
        }
        TextBlock
        {
          Margin: "10,0,0,0"
          VerticalAlignment: Center
          Text: bind
        }
      }
    }
    ItemsSource: bind $itemsSource
    SelectedValue: bind $selectedValue
    Text: bind $updateValue
          set
          [
            UpdateSourceTrigger: LostFocus
            Mode: OneWayToSource
            ValidatesOnExceptions: true
          ]
  }
}

UserControl "MonikDesktop.Views.StartupView"
{
  Resources: [
    BindingProxy Key="Proxy" { Data: bind }
  ]
  Grid
  {
    StackPanel
    {
      Orientation: Vertical
      Margin: "3"

      Label { "Window header" }
      TextBox { Text: bind AppTitle }

      Label { "Server Url" }
      @ComboBoxWithRemove("Data.RemoveUrlCommand", "ServerUrls", "App.ServerUrl", "UpdateServerUrl") {}

      Label { "Actions" }
      Button
      {
        Margin: "0 0 0 5"
        Command: bind NewLogCommand
        "Create Logs"
      }
      Button
      {
        Margin: "0 0 0 5"
        Command: bind NewKeepAliveCommand
        "Create KeepAlive"
      }
      Button
      {
        Margin: "0 0 0 5"
        Command: bind NewMetricsCommand
        "Create Metrics"
      }

      Separator { Margin: 10 }

      Label { "Authorization token" }
      @ComboBoxWithRemove("Data.RemoveAuthTokenCommand", "AuthTokens", "App.AuthToken", "UpdateAuthToken") {}

      Label { "Management" }
      Button
      {
        Margin: "0 0 0 5"
        Command: bind RemoveEntitiesCommand
        "Remove entities"
      }
      Button
      {
        Margin: "0 0 0 5"
        Command: bind ManageGroupsCommand
        "Manage groups"
      }
    }
    Grid
    {
      Background: "Gray"
      Opacity: "0.75"
      Visibility: bind IsBusy
                  convert (bool isBusy) => isBusy ? Visibility.Visible : Visibility.Collapsed
      ImageAwesome
      {
        Icon: "Cog"
        Spin: "True"
        Height: "48"
        Width: "48"
        SpinDuration: "4"
      }
    }
  }
}