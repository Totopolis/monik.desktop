using MonikDesktop.ViewModels;
using MonikDesktop.Common.ModelsApp;
using LiveCharts.Wpf;

UserControl "MonikDesktop.Views.MetricsView" {
  Resources: [
    BindingProxy Key="Proxy" { Data: bind }
  ]
  Grid {
    ColumnDefinitions:
    [
      ColumnDefinition { Width: Auto }
      ColumnDefinition { Width: "*" }
    ]
    DataGrid "MainGrid" {
      CanUserAddRows: false
      CanUserDeleteRows: false
      AutoGenerateColumns: false
      IsReadOnly: true
      RowHeight: 20
      HorizontalGridLinesBrush: Silver
      VerticalGridLinesBrush: Silver
      GridLinesVisibility: Horizontal
      Foreground: Black
      SelectedItem: bind SelectedMetric
      ItemsSource: bind MetricValuesList
      Grid.Column: 0
      Columns: [
        DataGridTextColumn {
          Header: "Source"
          Binding: bind "Description.Instance.Source.Name"
          Width: Auto
        }
        DataGridTextColumn {
          Header: "Instance"
          Binding: bind "Description.Instance.Name"
          Width: Auto
        }
        DataGridTextColumn {
          Header: "Name"
          Binding: bind Description.Name
          Width: Auto
        }
        DataGridTextColumn {
          Header: "Type"
          Binding: bind Description.Type
          Width: Auto
        }
        DataGridTextColumn {
          Header: "Value"
          Binding: bind Value
          Width: Auto
          Visibility: bind "Data.Model.MetricDiagramVisible" from $resource Proxy
                      convert (bool val) => val ? Visibility.Collapsed : Visibility.Visible
          ElementStyle: Style {
            TargetType: TextBlock
            Setters: [
              Setter { Property: "HorizontalAlignment",  Value: "Right" }
              Setter { Property: "VerticalAlignment",  Value: "Center" }
            ]
          }
        }
      ]
    }
    CartesianChart {
      Grid.Column: 1
      Background: White
      LegendLocation: None
      DataTooltip: MonikDesktop.Views.MetricsChartTooltipView {}
      DisableAnimations: true
      Hoverable: false
      Visibility: bind Model.MetricDiagramVisible
                  convert (bool val) => val ? Visibility.Visible : Visibility.Collapsed
      Series: ColumnSeries
      {
        MaxColumnWidth: double.PositiveInfinity
        ColumnPadding: bind SeriesColumnPadding
        Values: bind SeriesCollection
      }
      AxisX: Axis { LabelFormatter: bind DateTimeFormatter }
    }
  }
}